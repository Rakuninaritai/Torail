"""
Django settings for Torail project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import dj_database_url
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-2d6j*fw3jfplti#=dhw^wf7h68j92ot5m2zin2%pda4m(!7u&_"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    'torailback-production.up.railway.app',  # Railway の自動ドメイン
    'torail.app',                        # （将来使う）独自ドメイン
    'localhost',
    '127.0.0.1',
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',  # Django REST Framework（API用）
    'rest_framework.authtoken',#ログイン後はトークンを持たせるがそのとき用
    ###ソーシャルログイン用アカウント周り
    'django.contrib.sites',  # 必須：allauthのため
    'allauth',#djangoallauthの機能
    'allauth.account',#ユーザーのアカウント管理向け
    'allauth.socialaccount',  # ソーシャルログインを後から追加する場合に必要
    'dj_rest_auth',#ログインログアウトのエンドポイントを提供
    'dj_rest_auth.registration',#ユーザー登録用のエンドポイント用
    ###
    "main",
    "corsheaders"#djangoがフロント(react)のアクセスを許可するよう
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORSミドルウェアを追加(フロントとの連携でいる)
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # djangoallauthでのログインログアウト管理用
    'allauth.account.middleware.AccountMiddleware',
]
CORS_ALLOW_ALL_ORIGINS = True  # 全てのフロントエンドからのリクエストを許可（開発用）
# django-allauth用
SITE_ID=1
# allauth用の設定達
# メールアドレスの検証(メール確認リンク)をnone(本番mandatory)(送られてくるメールを踏んで初めて登録できるようになる)
ACCOUNT_EMAIL_VERIFICATION = 'none'
# アカウントに認証はユーザー名で行う
ACCOUNT_LOGIN_METHODS = {'username'}   # または 'email'
# メルアドの登録は必須とする
ACCOUNT_EMAIL_REQUIRED = True


ROOT_URLCONF = "Torail.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Torail.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if os.getenv("DATABASE_URL"):
    # Railway の PostgreSQL 用設定
    DATABASES = {
        "default": dj_database_url.config(
            conn_max_age=600,
            ssl_require=True
        )
    }
else:
    # ローカル開発用 SQLite 設定
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ユーザーモデル場所指定
AUTH_USER_MODEL = 'main.User'

# 認証有効化
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # ↓標準トークンによる認証
        'rest_framework.authentication.TokenAuthentication',
        # ↓JWTによる認証
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# 認証の設定
SIMPLE_JWT={
    #   アクセストークンは1日で切れるが7daysはリフレッシュトークンで別のアクトーが取得できログインなしで行ける
    'ACCESS_TOKEN_LIFETIME':timedelta(days=1),#アクセストークンの有効期限(1日)
    'REFRESH_TOKEN_LIFETIME':timedelta(days=7),#リフレッシュトークンの有効期限(7日),
    # リフトーを使って更新した場合、リフトーの使いまわしは不可
    'ROTATE_REFRESH_TOKENS':True,
    # 一度使ったリフトーはブラックリスト行
    'BLACKLIST_AFTER_ROTATION':True
}