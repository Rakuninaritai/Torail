"""
Django settings for Torail project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import dj_database_url
import os
from pathlib import Path
from datetime import timedelta
from cryptography.fernet import Fernet
from dotenv import load_dotenv
load_dotenv()   # ← これがあれば .env を読む（なければ追加）

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# 開発時にenvの=trueを読んでtrueにしてくれる
DEBUG = os.getenv("DEBUG", "False").lower() == "true"
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-2d6j*fw3jfplti#=dhw^wf7h68j92ot5m2zin2%pda4m(!7u&_"
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!


ALLOWED_HOSTS = [
    'back.torail.app',  
    'torail.app',                        # （将来使う）独自ドメイン
    'localhost',
    '127.0.0.1',
    '.ngrok-free.app',
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django_filters',
    'rest_framework',  # Django REST Framework（API用）
    'rest_framework.authtoken',#ログイン後はトークンを持たせるがそのとき用
    'rest_framework_simplejwt.token_blacklist',#tokenブラックリスト
    ###ソーシャルログイン用アカウント周り
    'django.contrib.sites',  # 必須：allauthのため
    'allauth',#djangoallauthの機能
    'allauth.account',#ユーザーのアカウント管理向け
    'allauth.socialaccount',  # ソーシャルログインを後から追加する場合に必要
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',#ログインログアウトのエンドポイントを提供
    'dj_rest_auth.registration',#ユーザー登録用のエンドポイント用
    ###
    "main",
    "corsheaders",#djangoがフロント(react)のアクセスを許可するよう,
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORSミドルウェアを追加(フロントとの連携でいる)
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # 追加
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # djangoallauthでのログインログアウト管理用
    'allauth.account.middleware.AccountMiddleware',
]
# django-allauth用
SITE_ID=1
# settings.py
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

LOGIN_REDIRECT_URL = "/api/auth/social/jwt/"
# allauth用の設定達
# メールアドレスの検証(メール確認リンク)をnone(本番mandatory)(送られてくるメールを踏んで初めて登録できるようになる)
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_USERNAME_REQUIRED     = True        # ユーザー名必須フラグ
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  # パスワード確認を要求するか
# アカウントに認証はユーザー名で行う
ACCOUNT_LOGIN_METHODS = {'username'}   # または 'email'
# メルアドの登録は必須とする
ACCOUNT_EMAIL_REQUIRED = True
# メルアド重複排除
ACCOUNT_UNIQUE_EMAIL = True
# ログインしますかみたいなやつを消すのtrue
SOCIALACCOUNT_LOGIN_ON_GET = True
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET") 
# デフォは開発用コールバック。Google側の認証情報に登録必須 
GOOGLE_REDIRECT_URI = os.getenv( 
    "GOOGLE_REDIRECT_URI", 
    "http://localhost:8000/accounts/google/login/callback/" 
) 
 
SOCIALACCOUNT_PROVIDERS = { 
    "google": { 
        "APP": { 
            "client_id": GOOGLE_CLIENT_ID, 
            "secret": GOOGLE_CLIENT_SECRET, 
            "key": "", 
        }, 
        "SCOPE": ["openid", "email", "profile"], 
        "AUTH_PARAMS": {"access_type": "online"}, 
    }, 
}

# メール送信用のやつ
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# 環境変数から読み込む（.env 等で管理）
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')       # 例: 'youraccount@gmail.com'
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')  # Gmail アプリパスワード
# 送信元アドレス
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL       = EMAIL_HOST_USER

ROOT_URLCONF = "Torail.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
# 静的ファイル
STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]

# ソーシャルサインアップのフォーム差し替え
SOCIALACCOUNT_FORMS = {
    "signup": "main.forms.MySocialSignupForm"
}

WSGI_APPLICATION = "Torail.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        # ─────────────── ここがポイント ───────────────
        env="DATABASE_URL",          # 必ず同じ名前の環境変数を見る
        conn_max_age=600,
        ssl_require=True,            # ローカルでも SSL 有効
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ユーザーモデル場所指定
AUTH_USER_MODEL = 'main.User'

# 認証有効化
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
       'main.authentication.CookieJWTAuthentication', 
        # 'dj_rest_auth.jwt_auth.JWTCookieAuthentication',    
       # ブラウザでのデバッグ用に SessionAuthentication を残す場合 
    #    'rest_framework.authentication.SessionAuthentication', 
   ),
    'DEFAULT_RENDERER_CLASSES': (
        # html(GUI)からエンドポイント触れない
        'rest_framework.renderers.JSONRenderer',
    ),
}

REST_USE_JWT = True

# 認証の設定
SIMPLE_JWT={
    #   アクセストークンは1日で切れるが7daysはリフレッシュトークンで別のアクトーが取得できログインなしで行ける
    'ACCESS_TOKEN_LIFETIME':timedelta(days=1),#アクセストークンの有効期限(1日)
    'REFRESH_TOKEN_LIFETIME':timedelta(days=7),#リフレッシュトークンの有効期限(7日),
    # リフトーを使って更新した場合、リフトーの使いまわしは不可
    'ROTATE_REFRESH_TOKENS':True,
    # 一度使ったリフトーはブラックリスト行
    'BLACKLIST_AFTER_ROTATION':True
}

REST_AUTH = {
    # 登録用シリアライザをカスタム版に差し替え
    'REGISTER_SERIALIZER': 'main.serializers.CustomRegisterSerializer',
}


# ----- CORS / CSRF / Cookie の設定 -----
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https" 
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "https://torail.app",
    "http://localhost:5173",  # ← 開発用
    "https://back.torail.app",
    "https://821279b47c13.ngrok-free.app",
]
CSRF_TRUSTED_ORIGINS = [
    "https://torail.app",
    "http://localhost:5173",  # ← ここを必ず正確に
    "https://back.torail.app",
    "https://821279b47c13.ngrok-free.app",
]
if DEBUG:
    # 開発時：ローカルから自由に叩けるように
    CORS_ALLOW_ALL_ORIGINS = True
    CSRF_COOKIE_SECURE    = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SAMESITE  = 'Lax'
    SESSION_COOKIE_SAMESITE = 'Lax'
else:
    # 本番時：自前ドメイン・フロント on HTTPS のみ許可
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS   = [
        "https://torail.app",
    ]
    CSRF_COOKIE_SECURE    = True    # HTTPS でのみ送信
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE  = 'Lax'   # 同一サイト外からのフォーム送信にも対応
    SESSION_COOKIE_SAMESITE = 'Lax'

FERNET_KEY = os.environ["FERNET_KEY"]
# # ----- Discord OAuth -----
DISCORD_CLIENT_ID        = os.getenv("DISCORD_CLIENT_ID")
DISCORD_CLIENT_SECRET    = os.getenv("DISCORD_CLIENT_SECRET")
DISCORD_REDIRECT_URI     = os.getenv("DISCORD_REDIRECT_URI")
DISCORD_PERMS            = os.getenv("DISCORD_PERMS")
DISCORD_BOT_TOKEN=os.getenv("DISCORD_BOT_TOKEN")

# ----- Slack OAuth -----
SLACK_CLIENT_ID          = os.getenv("SLACK_CLIENT_ID")
SLACK_CLIENT_SECRET      = os.getenv("SLACK_CLIENT_SECRET")
SLACK_REDIRECT_URI       = os.getenv("SLACK_REDIRECT_URI")

# ----- Celery -----
CELERY_BROKER_URL        = os.getenv("REDIS_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND    = os.getenv("REDIS_URL", "redis://localhost:6379/1")
CELERY_ACCEPT_CONTENT    = ["json"]
CELERY_TASK_SERIALIZER   = "json"
CELERY_RESULT_SERIALIZER = "json"

FRONTEND_URL = os.getenv("FRONTEND_URL")

# ── メール送信設定 ─────────────────────────────
EMAIL_BACKEND        = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST           = os.getenv("EMAIL_HOST") 
EMAIL_PORT           = 587
EMAIL_USE_TLS        = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER      = os.getenv("EMAIL_HOST_USER")      # .env から
EMAIL_HOST_PASSWORD  = os.getenv("EMAIL_HOST_PASSWORD")  # .env から
DEFAULT_FROM_EMAIL   = EMAIL_HOST_USER

# debug要クリア後消す
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {"verbose": {"format": "%(asctime)s [%(levelname)s/%(name)s] %(message)s"}},
#     "handlers": {
#         "console": {"class": "logging.StreamHandler", "formatter": "verbose"},
#     },
#     "loggers": {
#         "": {"handlers": ["console"], "level": "INFO"},
#         "celery": {"handlers": ["console"], "level": "INFO", "propagate": True},
#         "main.tasks": {"handlers": ["console"], "level": "INFO", "propagate": True},
#     },
# }
# 通知設定用
TORAIL_NOTIFY_PRIORITY = os.getenv("TORAIL_NOTIFY_PRIORITY", "slack,email,discord")